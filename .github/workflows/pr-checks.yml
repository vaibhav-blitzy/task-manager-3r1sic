name: PR Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: 3.11
  NODE_VERSION: 18.x
  BACKEND_PATH_PATTERN: src/backend/**
  FRONTEND_PATH_PATTERN: src/web/**
  MIN_BACKEND_COVERAGE: 85
  MIN_FRONTEND_COVERAGE: 80

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  validate_pr:
    name: Validate PR Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check PR has linked issues
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          if ! echo "$PR_BODY" | grep -qE "Fixes #[0-9]+|Closes #[0-9]+|Resolves #[0-9]+"; then
            echo "::error::PR description must reference an issue using 'Fixes #issue_number', 'Closes #issue_number', or 'Resolves #issue_number'"
            exit 1
          fi

      - name: Check PR title follows conventional commits
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if ! echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?: .+$"; then
            echo "::error::PR title must follow conventional commits format: type(scope): description"
            exit 1
          fi

      - name: Check PR description has required sections
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          if ! echo "$PR_BODY" | grep -q "## Description"; then
            echo "::error::PR description must contain a 'Description' section"
            exit 1
          fi
          if ! echo "$PR_BODY" | grep -q "## Testing"; then
            echo "::error::PR description must contain a 'Testing' section"
            exit 1
          fi

      - name: Comment on PR with validation results
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ PR format validation passed'
            })

  backend_checks:
    name: Backend Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if PR affects backend code
        id: check_backend
        uses: actions/github-script@v6
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const backendPattern = new RegExp('${{ env.BACKEND_PATH_PATTERN }}');
            const affectsBackend = files.some(file => backendPattern.test(file.filename));
            
            console.log(`PR affects backend: ${affectsBackend}`);
            core.setOutput('affected', affectsBackend.toString());

      - name: Set up Python
        if: steps.check_backend.outputs.affected == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        if: steps.check_backend.outputs.affected == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Run pylint
        if: steps.check_backend.outputs.affected == 'true'
        run: |
          poetry run pylint src/backend --output-format=text | tee pylint_report.txt
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Pylint check failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Run mypy type checking
        if: steps.check_backend.outputs.affected == 'true'
        run: |
          poetry run mypy src/backend --show-error-codes | tee mypy_report.txt
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Mypy type checking failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Run pytest with coverage
        if: steps.check_backend.outputs.affected == 'true'
        run: |
          poetry run pytest src/backend --cov=src/backend --cov-report=xml --cov-report=term | tee pytest_report.txt
          COVERAGE=$(poetry run coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if [ $COVERAGE -lt ${{ env.MIN_BACKEND_COVERAGE }} ]; then
            echo "::error::Test coverage ($COVERAGE%) is below the minimum required (${{ env.MIN_BACKEND_COVERAGE }}%)"
            exit 1
          fi

      - name: Run safety check for vulnerabilities
        if: steps.check_backend.outputs.affected == 'true'
        run: |
          poetry run pip install safety
          poetry export -f requirements.txt | poetry run safety check --stdin | tee safety_report.txt
          EXIT_CODE=${PIPESTATUS[2]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Safety check failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Post backend check results
        if: steps.check_backend.outputs.affected == 'true'
        uses: getsentry/action-git-diff-suggestions@v1
        with:
          message: "Backend Check Results"
          suggestions: |
            # Backend Check Results
            ## Pylint
            ```
            $(cat pylint_report.txt)
            ```

            ## Mypy
            ```
            $(cat mypy_report.txt)
            ```

            ## Test Coverage
            ```
            $(cat pytest_report.txt)
            ```

            ## Safety
            ```
            $(cat safety_report.txt)
            ```

  frontend_checks:
    name: Frontend Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if PR affects frontend code
        id: check_frontend
        uses: actions/github-script@v6
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const frontendPattern = new RegExp('${{ env.FRONTEND_PATH_PATTERN }}');
            const affectsFrontend = files.some(file => frontendPattern.test(file.filename));
            
            console.log(`PR affects frontend: ${affectsFrontend}`);
            core.setOutput('affected', affectsFrontend.toString());

      - name: Set up Node.js
        if: steps.check_frontend.outputs.affected == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package-lock.json'

      - name: Install Node.js dependencies
        if: steps.check_frontend.outputs.affected == 'true'
        working-directory: src/web
        run: npm ci

      - name: Run ESLint
        if: steps.check_frontend.outputs.affected == 'true'
        working-directory: src/web
        run: |
          npm run lint | tee eslint_report.txt
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::ESLint check failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Run TypeScript compiler
        if: steps.check_frontend.outputs.affected == 'true'
        working-directory: src/web
        run: |
          npm run typecheck | tee typescript_report.txt
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::TypeScript check failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Run Jest tests with coverage
        if: steps.check_frontend.outputs.affected == 'true'
        working-directory: src/web
        run: |
          npm test -- --coverage | tee jest_report.txt
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          COVERAGE_INT=$(echo $COVERAGE | cut -d. -f1)
          if [ $COVERAGE_INT -lt ${{ env.MIN_FRONTEND_COVERAGE }} ]; then
            echo "::error::Test coverage ($COVERAGE%) is below the minimum required (${{ env.MIN_FRONTEND_COVERAGE }}%)"
            exit 1
          fi

      - name: Run npm audit
        if: steps.check_frontend.outputs.affected == 'true'
        working-directory: src/web
        run: |
          npm audit --production | tee audit_report.txt || true
          HIGH_VULNS=$(cat audit_report.txt | grep -c "High" || echo 0)
          CRITICAL_VULNS=$(cat audit_report.txt | grep -c "Critical" || echo 0)
          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "::error::npm audit found $HIGH_VULNS high and $CRITICAL_VULNS critical vulnerabilities"
            exit 1
          fi

      - name: Verify build
        if: steps.check_frontend.outputs.affected == 'true'
        working-directory: src/web
        run: |
          npm run build | tee build_report.txt
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Build failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Post frontend check results
        if: steps.check_frontend.outputs.affected == 'true'
        uses: getsentry/action-git-diff-suggestions@v1
        with:
          message: "Frontend Check Results"
          suggestions: |
            # Frontend Check Results
            ## ESLint
            ```
            $(cat src/web/eslint_report.txt)
            ```

            ## TypeScript
            ```
            $(cat src/web/typescript_report.txt)
            ```

            ## Jest Tests
            ```
            $(cat src/web/jest_report.txt)
            ```

            ## npm Audit
            ```
            $(cat src/web/audit_report.txt)
            ```

            ## Build
            ```
            $(cat src/web/build_report.txt)
            ```

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python,javascript"

      - name: Check for hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'https://example.com' # Replace with staging URL once available
          fail_action: false
          allow_issue_writing: false

      - name: Generate security report
        run: |
          echo "# Security Scan Results" > security_report.md
          echo "## CodeQL Analysis" >> security_report.md
          echo "CodeQL analysis completed. Check Security tab for detailed results." >> security_report.md
          echo "" >> security_report.md
          echo "## Secret Scanning" >> security_report.md
          echo "Secret scanning completed. Please review any findings in the GitHub Security tab." >> security_report.md
          echo "" >> security_report.md
          echo "## OWASP ZAP Scan" >> security_report.md
          echo "ZAP baseline scan completed. Review the alerts for any security concerns." >> security_report.md
          cat security_report.md

      - name: Post security scan results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  pr_status:
    name: PR Status
    runs-on: ubuntu-latest
    needs: [validate_pr, backend_checks, frontend_checks, security_scan]
    steps:
      - name: Check results
        id: check_results
        run: |
          if [ "${{ needs.validate_pr.result }}" == "success" ] && \
             [ "${{ needs.backend_checks.result }}" == "success" ] && \
             [ "${{ needs.frontend_checks.result }}" == "success" ] && \
             [ "${{ needs.security_scan.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Generate check report
        run: |
          echo "# PR Check Summary" > report.md
          echo "" >> report.md
          echo "| Check | Status |" >> report.md
          echo "|-------|--------|" >> report.md
          echo "| PR Validation | ${{ needs.validate_pr.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> report.md
          echo "| Backend Checks | ${{ needs.backend_checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> report.md
          echo "| Frontend Checks | ${{ needs.frontend_checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> report.md
          echo "| Security Scan | ${{ needs.security_scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> report.md
          
          if [ "${{ steps.check_results.outputs.status }}" == "success" ]; then
            echo "" >> report.md
            echo "✅ **All checks passed! This PR is ready for review.**" >> report.md
          else
            echo "" >> report.md
            echo "❌ **Some checks failed. Please fix the issues before requesting a review.**" >> report.md
          fi
          
          cat report.md

      - name: Post PR status comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Update PR status
        if: steps.check_results.outputs.status == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.pulls.createReview({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Some automated checks have failed. Please review the comments and fix the issues.',
              event: 'REQUEST_CHANGES'
            });

      - name: Notify team of failures
        if: steps.check_results.outputs.status == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            // Get PR author
            const author = context.payload.pull_request.user.login;
            
            // Get assignees
            const assignees = context.payload.pull_request.assignees.map(a => a.login).join(', ');
            
            // Create notification message
            const message = `
            :warning: PR #${context.issue.number} checks failed
            
            - PR: ${context.payload.pull_request.html_url}
            - Author: @${author}
            ${assignees ? `- Assignees: ${assignees}` : ''}
            
            Please review the PR comments for details on the failing checks.
            `;
            
            // This would typically send to a team communication channel
            // For this example, we'll just log it
            console.log(message);