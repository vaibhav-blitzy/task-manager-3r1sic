name: Deploy Task Management System

on:
  push:
    branches:
      - main
      - release/*
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION_DEV: us-east-1
  AWS_REGION_STAGING: us-east-1
  AWS_REGION_PROD: us-east-1
  ECR_REPOSITORY: task-management-system
  ECS_CLUSTER_DEV: task-management-dev
  ECS_CLUSTER_STAGING: task-management-staging
  ECS_CLUSTER_PROD: task-management-prod

jobs:
  deploy-to-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_DEV }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update ECS task definitions
        run: |
          # Replace the image placeholder in the task definition file
          sed -i "s|IMAGE_PLACEHOLDER|${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-dev|g" infrastructure/ecs/task-definitions/dev-task-definition.json
          
          # Register the new task definition
          aws ecs register-task-definition \
            --cli-input-json file://infrastructure/ecs/task-definitions/dev-task-definition.json
        
      - name: Deploy to ECS development cluster
        run: |
          # Get latest task definition revision
          TASK_REVISION=$(aws ecs describe-task-definition --task-definition task-management-dev --query 'taskDefinition.revision' --output text)
          
          # Update the service with the new task definition - rolling deployment
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER_DEV }} \
            --service task-management-service-dev \
            --task-definition task-management-dev:$TASK_REVISION \
            --force-new-deployment
          
      - name: Wait for services to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER_DEV }} \
            --services task-management-service-dev
            
      - name: Run validation tests
        run: |
          echo "Running validation tests against development environment"
          # Add validation test commands here
          
      - name: Slack notification for successful deployment
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Development Deployment Successful! 🚀\nRepository: ${{ github.repository }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEV }}

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    if: success() && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    environment:
      name: staging
      url: https://staging.taskmanagementsystem.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_STAGING }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build and push Docker images for staging
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-staging
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure/terraform/staging
          
      - name: Deploy Blue Environment
        run: |
          # Create new blue environment - Blue-Green deployment strategy
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-staging"
          
          terraform apply -auto-approve \
            -var="environment=staging" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=0" # Start with 0% traffic to the blue environment
        working-directory: ./infrastructure/terraform/staging
          
      - name: Wait for Blue Environment to Stabilize
        run: |
          # Wait for ECS services to stabilize
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER_STAGING }} \
            --services task-management-service-staging-blue
            
      - name: Run Integration Tests
        run: |
          echo "Running integration tests against blue environment"
          # Add integration test commands here
          
      - name: Switch Traffic to Blue Environment
        run: |
          # Update ALB target groups to send 100% traffic to blue
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-staging"
          
          terraform apply -auto-approve \
            -var="environment=staging" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=100" # Now sending 100% traffic to blue
        working-directory: ./infrastructure/terraform/staging
          
      - name: Monitor for Stability
        run: |
          # Wait for a stability period while monitoring the environment
          echo "Monitoring blue environment for stability..."
          sleep 300  # 5 minutes
          
      - name: Run Verification Tests
        run: |
          echo "Running verification tests after traffic switch"
          # Add verification test commands here
          
      - name: Cleanup Old Green Environment
        if: success()
        run: |
          # Scale down old environment
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-staging"
          
          terraform apply -auto-approve \
            -var="environment=staging" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=100" \
            -var="green_desired_count=0" # Scale down the green environment
        working-directory: ./infrastructure/terraform/staging
          
      - name: Slack notification for successful deployment
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Staging Deployment Successful! 🚀\nRepository: ${{ github.repository }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_STAGING }}

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    if: success() && (startsWith(github.ref, 'refs/heads/release/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'))
    environment:
      name: production
      url: https://taskmanagementsystem.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_PROD }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build and push Docker images for production
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure/terraform/production
          
      - name: Deploy Blue Environment
        run: |
          # Create new blue environment - Blue-Green with Canary deployment strategy
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-prod"
          
          terraform apply -auto-approve \
            -var="environment=production" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=0" # Start with 0% traffic
        working-directory: ./infrastructure/terraform/production
          
      - name: Wait for Blue Environment to Stabilize
        run: |
          # Wait for ECS services to stabilize
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER_PROD }} \
            --services task-management-service-prod-blue
            
      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests against blue environment"
          # Add smoke test commands here
          
      - name: Start Canary Deployment (10% to Blue)
        run: |
          # Update traffic distribution to 10% blue, 90% green - canary deployment
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-prod"
          
          terraform apply -auto-approve \
            -var="environment=production" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=10"
        working-directory: ./infrastructure/terraform/production
          
      - name: Monitor Canary Performance
        run: |
          # Wait while monitoring canary performance
          echo "Monitoring canary deployment (10% traffic)..."
          sleep 300  # 5 minutes
          
          # Check CloudWatch metrics for error spikes
          echo "Checking CloudWatch metrics for error spikes"
          # Add commands to check for error rates or performance issues
          
      - name: Increase Traffic to 30%
        if: success()
        run: |
          # Update traffic distribution to 30% blue, 70% green
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-prod"
          
          terraform apply -auto-approve \
            -var="environment=production" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=30"
        working-directory: ./infrastructure/terraform/production
          
      - name: Monitor Performance at 30%
        run: |
          # Wait while monitoring performance
          echo "Monitoring deployment at 30% traffic..."
          sleep 300  # 5 minutes
          
      - name: Increase Traffic to 50%
        if: success()
        run: |
          # Update traffic distribution to 50% blue, 50% green
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-prod"
          
          terraform apply -auto-approve \
            -var="environment=production" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=50"
        working-directory: ./infrastructure/terraform/production
          
      - name: Monitor Performance at 50%
        run: |
          # Wait while monitoring performance
          echo "Monitoring deployment at 50% traffic..."
          sleep 300  # 5 minutes
          
      - name: Complete Traffic Shift (100% to Blue)
        if: success()
        run: |
          # Update traffic distribution to 100% blue
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-prod"
          
          terraform apply -auto-approve \
            -var="environment=production" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=100"
        working-directory: ./infrastructure/terraform/production
          
      - name: Run Final Validation Tests
        run: |
          echo "Running final validation tests"
          # Add validation test commands here
          
      - name: Cleanup Old Green Environment
        if: success()
        run: |
          # Scale down old environment
          export TF_VAR_ecr_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}-prod"
          
          terraform apply -auto-approve \
            -var="environment=production" \
            -var="deployment_color=blue" \
            -var="image_tag=$TF_VAR_ecr_image" \
            -var="traffic_distribution=100" \
            -var="green_desired_count=0"
        working-directory: ./infrastructure/terraform/production
        
      - name: Create Deployment Tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag "production-deployment-$(date +'%Y%m%d%H%M%S')"
          git push origin "production-deployment-$(date +'%Y%m%d%H%M%S')"
          
      - name: Slack notification for successful deployment
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Production Deployment Successful! 🚀\nRepository: ${{ github.repository }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_PROD }}

  rollback:
    name: Rollback Failed Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-to-dev.result == 'failure' || needs.deploy-to-staging.result == 'failure' || needs.deploy-to-production.result == 'failure')
    needs: [deploy-to-dev, deploy-to-staging, deploy-to-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to get all tags
        
      - name: Determine Failed Environment
        id: determine-env
        run: |
          if [ "${{ needs.deploy-to-production.result }}" == "failure" ]; then
            echo "FAILED_ENV=production" >> $GITHUB_ENV
            echo "AWS_REGION=${{ env.AWS_REGION_PROD }}" >> $GITHUB_ENV
            echo "ECS_CLUSTER=${{ env.ECS_CLUSTER_PROD }}" >> $GITHUB_ENV
          elif [ "${{ needs.deploy-to-staging.result }}" == "failure" ]; then
            echo "FAILED_ENV=staging" >> $GITHUB_ENV
            echo "AWS_REGION=${{ env.AWS_REGION_STAGING }}" >> $GITHUB_ENV
            echo "ECS_CLUSTER=${{ env.ECS_CLUSTER_STAGING }}" >> $GITHUB_ENV
          else
            echo "FAILED_ENV=development" >> $GITHUB_ENV
            echo "AWS_REGION=${{ env.AWS_REGION_DEV }}" >> $GITHUB_ENV
            echo "ECS_CLUSTER=${{ env.ECS_CLUSTER_DEV }}" >> $GITHUB_ENV
          fi
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Get Previous Stable Deployment
        id: get-previous
        run: |
          if [ "${{ env.FAILED_ENV }}" == "production" ]; then
            # Get the previous production deployment tag
            PREV_TAG=$(git describe --tags --abbrev=0 --match "production-deployment-*")
            echo "PREV_DEPLOYMENT=$PREV_TAG" >> $GITHUB_ENV
          else
            # For dev and staging, get the previous task definition revision
            PREV_REVISION=$(aws ecs describe-task-definition --task-definition task-management-${{ env.FAILED_ENV }} --query 'taskDefinition.revision - 1' --output text)
            echo "PREV_REVISION=$PREV_REVISION" >> $GITHUB_ENV
          fi
          
      - name: Set up Terraform for Rollback
        if: env.FAILED_ENV == 'production' || env.FAILED_ENV == 'staging'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
          
      - name: Execute Rollback
        run: |
          if [ "${{ env.FAILED_ENV }}" == "production" ] || [ "${{ env.FAILED_ENV }}" == "staging" ]; then
            # For blue-green deployments, switch back to the green environment
            cd ./infrastructure/terraform/${{ env.FAILED_ENV }}
            terraform init
            
            terraform apply -auto-approve \
              -var="environment=${{ env.FAILED_ENV }}" \
              -var="deployment_color=green" \
              -var="traffic_distribution=100"
              
            echo "Successfully rolled back ${{ env.FAILED_ENV }} deployment to previous green environment"
          else
            # For dev rolling deployment, roll back to previous task definition
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service task-management-service-dev \
              --task-definition task-management-dev:${{ env.PREV_REVISION }} \
              --force-new-deployment
              
            aws ecs wait services-stable \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services task-management-service-dev
              
            echo "Successfully rolled back development deployment to revision ${{ env.PREV_REVISION }}"
          fi
          
      - name: Slack notification for rollback
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "🔄 Deployment Rollback Executed! ⚠️\nEnvironment: ${{ env.FAILED_ENV }}\nRepository: ${{ github.repository }}\nReverted to: ${{ env.PREV_DEPLOYMENT || format('Revision {0}', env.PREV_REVISION) }}\nTriggered by: ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_ALERTS }}